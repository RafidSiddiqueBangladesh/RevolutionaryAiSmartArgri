const axios = require('axios');
require('dotenv').config();

/**
 * Retell AI Service for Voice Calls
 * Integrates with AgriSense for farm advisory calls
 */

const RETELL_API_KEY = process.env.RETELL_API_KEY;
const RETELL_BASE_URL = 'https://api.retellai.com/v2';
const AGRISENSE_BACKEND_URL = process.env.AGRISENSE_BACKEND_URL || 'https://agrisense-z6ks.onrender.com';

/**
 * Create a voice call for critical farm alerts
 * @param {Object} farmData - Complete farm data for the call
 * @param {string} phoneNumber - Farmer's phone number
 * @param {string} alertMessage - Critical alert message
 * @returns {Promise<Object>} Call result
 */
async function createCriticalAlertCall(farmData, phoneNumber, alertMessage) {
  try {
    console.log('\nüîä ===== INITIATING VOICE CALL =====');
    console.log('üìû Calling:', phoneNumber);
    console.log('üö® Alert:', alertMessage);
    console.log('üë®‚Äçüåæ Farmer:', farmData.farmer.name);
    console.log('====================================');

    // Create the voice agent with farm-specific context
    const agentPrompt = generateFarmAdvisoryPrompt(farmData, alertMessage);
    
    const callPayload = {
      agent_id: process.env.RETELL_AGENT_ID, // Your pre-configured agent ID
      phone_number: phoneNumber,
      override_agent_prompt: agentPrompt,
      metadata: {
        farmer_id: farmData.farmer.id,
        device_id: farmData.device.id,
        alert_type: farmData.alert.type,
        call_purpose: 'critical_alert'
      }
    };

    const response = await axios.post(
      `${RETELL_BASE_URL}/create-phone-call`,
      callPayload,
      {
        headers: {
          'Authorization': `Bearer ${RETELL_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      }
    );

    console.log('‚úÖ Voice call initiated successfully!');
    console.log('üìû Call ID:', response.data.call_id);
    
    return {
      success: true,
      callId: response.data.call_id,
      status: response.data.call_status,
      farmerId: farmData.farmer.id,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå Voice call failed:', error.message);
    console.error('Error details:', error.response?.data || 'No additional details');
    
    return {
      success: false,
      error: error.message,
      response: error.response?.data || null,
      farmerId: farmData.farmer.id,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Generate farm-specific prompt for Retell AI agent
 * @param {Object} farmData - Complete farm data
 * @param {string} alertMessage - Critical alert message
 * @returns {string} Retell AI agent prompt
 */
function generateFarmAdvisoryPrompt(farmData, alertMessage) {
  const prompt = `
You are an expert agricultural advisor AI calling ${farmData.farmer.name} in Bangladesh about a critical farm condition.

CRITICAL ALERT: ${alertMessage}

FARMER PROFILE:
- Name: ${farmData.farmer.name}
- Location: ${farmData.farmer.location}
- Crop: ${farmData.crop.type}
- Land Size: ${farmData.farmer.landSize} acres
- Mobile: ${farmData.farmer.mobile}

CURRENT SENSOR DATA:
- Soil Moisture: ${farmData.sensors.soilMoisture}%
- Soil pH: ${farmData.sensors.soilPH}
- Temperature: ${farmData.sensors.soilTemperature}¬∞C
- Humidity: ${farmData.sensors.humidity}%
- Light: ${farmData.sensors.lightIntensity} lux
- Conductivity: ${farmData.sensors.soilConductivity} ŒºS/cm
- Nitrogen: ${farmData.sensors.nutrients.nitrogen} ppm
- Phosphorus: ${farmData.sensors.nutrients.phosphorus} ppm
- Potassium: ${farmData.sensors.nutrients.potassium} ppm

WEATHER CONDITIONS:
- Temperature: ${farmData.weather.temperature}¬∞C
- Humidity: ${farmData.weather.humidity}%
- Rainfall: ${farmData.weather.rainfall}mm

CONVERSATION FLOW:
1. Greet the farmer by name in Bengali/English mix
2. Explain the critical alert clearly
3. Provide immediate action recommendations
4. Answer any questions about their farm data
5. Offer additional agricultural advice
6. End with encouraging words

CAPABILITIES:
- You have access to ALL their farm data above
- You can answer questions about soil, crops, weather
- Provide irrigation, fertilizer, and pest control advice
- Explain sensor readings in simple terms
- Give seasonal farming tips
- Help with crop planning

LANGUAGE: Speak in Bengali-English mix as common in Bangladesh. Use simple, farmer-friendly language.

PERSONALITY: Helpful, knowledgeable, caring, and patient. You're like a trusted agricultural extension officer.

BACKEND ACCESS: If farmer asks for updated data, you can mention the data is from their AgriSense IoT sensors updated every 30 seconds.

Start the call by saying: "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ ${farmData.farmer.name} ‡¶≠‡¶æ‡¶á‡•§ ‡¶Ü‡¶Æ‡¶ø AgriSense ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡•§"
`;

  return prompt;
}

/**
 * Handle webhook from Retell AI during conversation
 * This allows real-time data access during the call
 * @param {Object} webhookData - Retell webhook payload
 * @returns {Promise<Object>} Response for Retell AI
 */
async function handleConversationWebhook(webhookData) {
  try {
    const { call_id, farmer_id, user_message } = webhookData;
    
    console.log(`üìû Call ${call_id}: Farmer asked: "${user_message}"`);
    
    // If farmer asks for updated sensor data
    if (user_message.includes('sensor') || user_message.includes('moisture') || user_message.includes('data')) {
      // Fetch fresh sensor data from your database
      const freshData = await getFreshSensorData(farmer_id);
      
      return {
        response: `Let me check your latest sensor data... Your current soil moisture is ${freshData.moisture_level}%, pH is ${freshData.ph_level}, and temperature is ${freshData.temperature}¬∞C. This data was updated ${Math.round((Date.now() - new Date(freshData.last_updated)) / 60000)} minutes ago.`,
        continue_conversation: true
      };
    }
    
    // Default response for other questions
    return {
      response: "I have all your farm data available. What specific information would you like to know about your crops or soil conditions?",
      continue_conversation: true
    };
    
  } catch (error) {
    console.error('Webhook error:', error);
    return {
      response: "I'm having trouble accessing your data right now, but I can still help with general farming advice.",
      continue_conversation: true
    };
  }
}

/**
 * Get fresh sensor data for live conversation
 * @param {string} farmerId - Farmer's user ID
 * @returns {Promise<Object>} Latest sensor data
 */
async function getFreshSensorData(farmerId) {
  try {
    const response = await axios.get(
      `${AGRISENSE_BACKEND_URL}/api/device/sensor-data?user_id=${farmerId}`,
      {
        headers: {
          'Authorization': `Bearer ${process.env.INTERNAL_API_TOKEN}` // Internal token for Retell calls
        }
      }
    );
    
    return response.data.sensorData[0]; // Latest reading
  } catch (error) {
    console.error('Failed to fetch fresh sensor data:', error);
    return null;
  }
}

/**
 * Get call analytics and status
 * @param {string} callId - Retell call ID
 * @returns {Promise<Object>} Call details
 */
async function getCallStatus(callId) {
  try {
    const response = await axios.get(
      `${RETELL_BASE_URL}/get-call/${callId}`,
      {
        headers: {
          'Authorization': `Bearer ${RETELL_API_KEY}`
        }
      }
    );
    
    return response.data;
  } catch (error) {
    console.error('Failed to get call status:', error);
    return null;
  }
}

module.exports = {
  createCriticalAlertCall,
  handleConversationWebhook,
  getCallStatus,
  getFreshSensorData
};
